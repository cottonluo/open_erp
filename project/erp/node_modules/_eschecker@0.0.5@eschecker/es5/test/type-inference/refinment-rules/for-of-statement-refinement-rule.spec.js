"use strict";

var _sinon = require("sinon");

var _sinon2 = _interopRequireDefault(_sinon);

var _chai = require("chai");

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

var _program = require("../../../lib/semantic-model/program");

var _symbol = require("../../../lib/semantic-model/symbol");

var _hindleyMilnerContext = require("../../../lib/type-inference/hindley-milner-context");

var _typeInferenceContext = require("../../../lib/type-inference/type-inference-context");

var _types = require("../../../lib/semantic-model/types");

var _forOfStatementRefinementRule = require("../../../lib/type-inference/refinement-rules/for-of-statement-refinement-rule");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("ForOfStatementRefinementRule", function () {
	let context, rule, program;

	beforeEach(function () {
		program = new _program.Program();
		context = new _hindleyMilnerContext.HindleyMilnerContext(null, new _typeInferenceContext.TypeInferenceContext(program));
		rule = new _forOfStatementRefinementRule.ForOfStatementRefinementRule();
	});

	describe("canRefine", function () {
		it("returns true if the node is a for of statement", function () {
			// arrange
			const forOfStatement = t.forOfStatement(t.identifier("x"), t.identifier("array"), t.blockStatement([]));

			// act, assert
			(0, _chai.expect)(rule.canRefine(forOfStatement)).to.be.true;
		});

		it("returns false if the node is not a for of statement", function () {
			(0, _chai.expect)(rule.canRefine(t.identifier("x"))).to.be.false;
		});
	});

	describe("refine", function () {
		it("returns type void", function () {
			// arrange
			const forOfStatement = t.forOfStatement(t.identifier("x"), t.identifier("array"), t.blockStatement([]));

			_sinon2.default.stub(context, "infer").withArgs(forOfStatement.left).returns(_types.TypeVariable.create()).withArgs(forOfStatement.right).returns(_types.ArrayType.of(_types.NumberType.create()));

			// act, assert
			(0, _chai.expect)(rule.refine(forOfStatement, context)).to.be.instanceOf(_types.VoidType);
		});

		it("substitutes the type of the left hand side with the type of the array elements", function () {
			// arrange
			const forOfStatement = t.forOfStatement(t.identifier("x"), t.identifier("array"), t.blockStatement([]));
			const x = new _symbol.Symbol("x", _symbol.SymbolFlags.Variable);
			const xType = _types.TypeVariable.create();
			context.setType(x, xType);

			_sinon2.default.stub(context, "infer").withArgs(forOfStatement.left).returns(xType).withArgs(forOfStatement.right).returns(_types.ArrayType.of(_types.NumberType.create()));

			// act
			rule.refine(forOfStatement, context);

			// assert
			(0, _chai.expect)(context.getType(x)).to.be.instanceOf(_types.NumberType);
		});

		it("throws if the right hand side is not an array", function () {
			// arrange
			const forOfStatement = t.forOfStatement(t.identifier("x"), t.identifier("array"), t.blockStatement([]));

			_sinon2.default.stub(context, "infer").withArgs(forOfStatement.left).returns(_types.TypeVariable.create()).withArgs(forOfStatement.right).returns(_types.NumberType.create());

			// act, assert
			(0, _chai.expect)(() => rule.refine(forOfStatement, context)).to.throw("Type inference failure: The type number does not support iteration.");
		});
	});
});
//# sourceMappingURL=for-of-statement-refinement-rule.spec.js.map
