"use strict";

var _chai = require("chai");

var _program = require("../../lib/semantic-model/program");

var _program2 = _interopRequireDefault(_program);

var _scope = require("../../lib/semantic-model/scope");

var _scope2 = _interopRequireDefault(_scope);

var _symbolTable = require("../../lib/semantic-model/symbol-table");

var _symbolTable2 = _interopRequireDefault(_symbolTable);

var _sourceFile = require("../../lib/semantic-model/source-file");

var _sourceFile2 = _interopRequireDefault(_sourceFile);

var _controlFlowGraph = require("../../lib/cfg/control-flow-graph");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("Program", function () {
	it("creates a global scope by default", function () {
		// arrange
		const program = new _program2.default();

		// assert
		(0, _chai.expect)(program.globalScope).to.be.instanceOf(_scope2.default);
	});

	it("creates a new symbol table", function () {
		// arrange
		const program = new _program2.default();

		// assert
		(0, _chai.expect)(program.symbolTable).to.be.instanceOf(_symbolTable2.default);
	});

	describe("getSourceFile", function () {
		it("returns the source file with the given name", function () {
			// arrange
			const program = new _program2.default();
			const sourceFile = new _sourceFile2.default("program.specs.js", "let x = 10", program.globalScope);
			program.addSourceFile(sourceFile);

			// act
			(0, _chai.expect)(program.getSourceFile(sourceFile.path)).to.equal(sourceFile);
		});

		it("returns undefined if the program does not contain a source file with the given path", function () {
			// arrange
			const program = new _program2.default();
			const sourceFile = new _sourceFile2.default("program.specs.js", "let x = 10", program.globalScope);
			program.addSourceFile(sourceFile);

			// act
			(0, _chai.expect)(program.getSourceFile("scope.specs.js")).to.be.undefined;
		});
	});

	describe("addSourceFile", function () {
		it("throws if a source file with the given name already exists", function () {
			// arrange
			const program = new _program2.default();
			const sourceFile = new _sourceFile2.default("program.specs.js", "let x = 10", program.globalScope);
			program.addSourceFile(sourceFile);

			// act
			const file2 = new _sourceFile2.default("program.specs.js", "let x = 11", program.globalScope);
			(0, _chai.expect)(() => program.addSourceFile(file2)).to.throw;
		});
	});

	describe("sourceFiles", function () {
		it("returns an iterator over all source files that are part of the program", function () {
			// arrange
			const program = new _program2.default();
			const sourceFile = new _sourceFile2.default(".program.specs.js", "let x = 10", program.globalScope);
			program.addSourceFile(sourceFile);

			// act
			(0, _chai.expect)(Array.from(program.sourceFiles)).to.deep.equal([sourceFile]);
		});

		it("returns an empty iterator if the program contains no source files", function () {
			// arrange
			const program = new _program2.default();

			// act
			(0, _chai.expect)(Array.from(program.sourceFiles)).to.be.empty;
		});
	});

	describe("createSourceFile", function () {
		it("creates a new source file from the given parameters", function () {
			// arrange
			const program = new _program2.default();

			// act
			const createdSourceFile = program.createSourceFile("program.specs.js", "let x = 10");

			// assert
			(0, _chai.expect)(createdSourceFile).to.be.instanceOf(_sourceFile2.default);
			(0, _chai.expect)(createdSourceFile.path).to.equal("program.specs.js");
			(0, _chai.expect)(createdSourceFile.text).to.equal("let x = 10");
		});

		it("adds the source file to the list of sourcefiles of the program.", function () {
			// arrange
			const program = new _program2.default();

			// act
			const createdSourceFile = program.createSourceFile("program.specs.js", "let x = 10");

			// assert
			(0, _chai.expect)(program.getSourceFile("program.specs.js")).to.equal(createdSourceFile);
		});
	});

	describe("getCfg", function () {
		it("returns the CFG of the sourcefile to which the ast node belongs to", function () {
			// arrange
			const program = new _program2.default();
			const sourceFile = program.createSourceFile("./test/program.specs", "let x = 10;");
			sourceFile.parse();
			sourceFile.ast.cfg = new _controlFlowGraph.ControlFlowGraph();

			// act, assert
			(0, _chai.expect)(program.getCfg(sourceFile.ast.program)).to.equal(sourceFile.ast.cfg);
		});
	});
});
//# sourceMappingURL=program.spec.js.map
