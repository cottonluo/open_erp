"use strict";

var _chai = require("chai");

var _symbol = require("../../lib/semantic-model/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

var _symbolTable = require("../../lib/semantic-model/symbol-table");

var _symbolTable2 = _interopRequireDefault(_symbolTable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("SymbolTable", function () {
	let table;

	beforeEach(function () {
		table = new _symbolTable2.default();
	});
	it("returns the associated symbol of the passed in node", function () {
		// arrange
		const astNode = {};
		const symbol = new _symbol2.default("");

		table.setSymbol(astNode, symbol);

		// act
		(0, _chai.expect)(table.getSymbol(astNode)).to.equal(symbol);
	});

	describe("getSymbol", function () {
		it("throws if the node is null or undefined", function () {
			(0, _chai.expect)(() => table.getSymbol(undefined)).to.throw;
			(0, _chai.expect)(() => table.getSymbol(null)).to.throw;
		});
	});

	describe("setSymbol", function () {
		it("throws if the node is null or undefined", function () {
			const symbol = new _symbol2.default("");

			(0, _chai.expect)(() => table.getSymbol(undefined, symbol)).to.throw;
			(0, _chai.expect)(() => table.getSymbol(null, symbol)).to.throw;
		});

		it("throws if the symbol is null or undefined", function () {
			const astNode = {};

			(0, _chai.expect)(() => table.getSymbol(astNode, undefined)).to.throw;
			(0, _chai.expect)(() => table.getSymbol(astNode, null)).to.throw;
		});
	});
});
//# sourceMappingURL=symbol-table.spec.js.map
