"use strict";

var _chai = require("chai");

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

var _sinon = require("sinon");

var _sinon2 = _interopRequireDefault(_sinon);

var _returnStatementRefinementRule = require("../../../lib/type-inference/refinement-rules/return-statement-refinement-rule");

var _types = require("../../../lib/semantic-model/types");

var _hindleyMilnerContext = require("../../../lib/type-inference/hindley-milner-context");

var _symbol = require("../../../lib/semantic-model/symbol");

var _program = require("../../../lib/semantic-model/program");

var _typeInferenceContext = require("../../../lib/type-inference/type-inference-context");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

describe("ReturnStatementRefinementRule", function () {
	let rule, context, program;

	beforeEach(function () {
		program = new _program.Program();
		context = new _hindleyMilnerContext.HindleyMilnerContext(null, new _typeInferenceContext.TypeInferenceContext(program));
		_sinon2.default.stub(context, "infer");
		_sinon2.default.stub(context, "unify");
		rule = new _returnStatementRefinementRule.ReturnStatementRefinementRule();
	});

	describe("canRefine", function () {
		it("returns true for a return statement declaration", function () {
			// arrange
			const returnStatement = t.returnStatement(t.identifier("x"));

			// act, assert
			(0, _chai.expect)(rule.canRefine(returnStatement)).to.be.true;
		});

		it("returns false in the other cases", function () {
			// arrange
			const identifier = t.identifier("x");

			// act, assert
			(0, _chai.expect)(rule.canRefine(identifier)).to.be.false;
		});
	});

	describe("refine", function () {

		it("sets the type of the `return` symbol to the evaluated type of the return expression", function () {
			// arrange
			const returnStatement = t.returnStatement(t.binaryExpression("*", t.identifier("x"), t.numericLiteral(2)));

			context.infer.withArgs(returnStatement.argument).returns(_types.NumberType.create());

			// act
			rule.refine(returnStatement, context);

			// assert
			(0, _chai.expect)(context.getType(_symbol.Symbol.RETURN)).to.be.an.instanceOf(_types.NumberType);
		});

		it("unifies the type of the `return` symbol with the type of the return `argument`", function () {
			// arrange
			const returnStatement = t.returnStatement(t.binaryExpression("*", t.identifier("x"), t.numericLiteral(2)));

			context.setType(_symbol.Symbol.RETURN, _types.NullType.create());
			context.infer.withArgs(returnStatement.argument).returns(_types.NumberType.create());
			context.unify.withArgs(_sinon2.default.match.instanceOf(_types.NullType), _sinon2.default.match.instanceOf(_types.NumberType)).returns(_types.MaybeType.of(_types.NumberType.create()));

			// act
			rule.refine(returnStatement, context);

			// assert
			(0, _chai.expect)(context.getType(_symbol.Symbol.RETURN)).to.be.an.instanceOf(_types.MaybeType);
		});

		it("sets the type of the `return` symbol to VoidType if the return statement has no argument (just return;)", function () {
			// arrange
			const returnStatement = t.returnStatement();

			// act
			rule.refine(returnStatement, context);

			// assert
			(0, _chai.expect)(context.getType(_symbol.Symbol.RETURN)).to.be.an.instanceOf(_types.VoidType);
		});

		it("the type of a return statement is void", function () {
			// arrange
			const returnStatement = t.returnStatement(t.binaryExpression("*", t.identifier("x"), t.numericLiteral(2)));
			context.infer.withArgs(returnStatement.argument).returns(_types.NumberType.create());

			// act, assert
			(0, _chai.expect)(rule.refine(returnStatement, context)).to.be.instanceOf(_types.VoidType);
		});
	});
});
//# sourceMappingURL=return-statement-refinement-rule.spec.js.map
