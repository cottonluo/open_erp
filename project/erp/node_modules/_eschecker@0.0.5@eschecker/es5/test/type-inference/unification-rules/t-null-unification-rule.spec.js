"use strict";

var _chai = require("chai");

var _tNullUnificationRule = require("../../../lib/type-inference/unification-rules/t-null-unification-rule");

var _tNullUnificationRule2 = _interopRequireDefault(_tNullUnificationRule);

var _index = require("../../../lib/semantic-model/types/index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("TNullUnificationRule", function () {
	let rule;

	beforeEach(function () {
		rule = new _tNullUnificationRule2.default();
	});

	describe("canUnify", function () {
		it("returns true if t1 is null type", function () {
			(0, _chai.expect)(rule.canUnify(_index.NumberType.create(), _index.NullType.create())).to.be.true;
		});

		it("returns true if t2 is null type", function () {
			(0, _chai.expect)(rule.canUnify(_index.NullType.create(), _index.NumberType.create())).to.be.true;
		});

		it("returns false if t1 null but t2 is maybe type", function () {
			(0, _chai.expect)(rule.canUnify(_index.NullType.create(), _index.MaybeType.of(new _index.Type("string")))).to.be.false;
		});

		it("returns false if t2 is null type but t1 is maybe type", function () {
			(0, _chai.expect)(rule.canUnify(_index.MaybeType.of(new _index.Type("string")), _index.NullType.create())).to.be.false;
		});

		it("returns false if neither t1 nor t2 is null type", function () {
			(0, _chai.expect)(rule.canUnify(_index.NumberType.create(), new _index.Type("string"))).to.be.false;
		});
	});

	describe("unify", function () {
		it("returns Maybe<T> type", function () {
			// act, assert
			(0, _chai.expect)(rule.unify(_index.NumberType.create(), _index.NullType.create())).to.be.instanceOf(_index.MaybeType).and.to.have.property("of").that.is.an.instanceOf(_index.NumberType);
			(0, _chai.expect)(rule.unify(_index.NullType.create(), _index.NumberType.create())).to.be.instanceOf(_index.MaybeType).and.to.have.property("of").that.is.an.instanceOf(_index.NumberType);
		});
	});
});
//# sourceMappingURL=t-null-unification-rule.spec.js.map
