"use strict";

var _chai = require("chai");

var _babylon = require("babylon");

var _dot = require("../../lib/cfg/dot");

var _controlFlowGraph = require("../../lib/cfg/control-flow-graph");

var _controlFlowGraph2 = _interopRequireDefault(_controlFlowGraph);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("dot", () => {
	describe("cfgToDot", () => {
		it("returns an empty digraph when the cfg is empty", () => {
			// arrange
			const cfg = new _controlFlowGraph2.default();

			// act
			const dot = (0, _dot.cfgToDot)(cfg);

			// assert
			(0, _chai.expect)(dot).to.equal(`digraph cfg {
}`);
		});

		it("creates a node for each node in the cfg", () => {
			// arrange
			const ast = (0, _babylon.parse)(`
				const x = 10;
				const y = 11;
			`);

			const xAssignment = ast.program.body[0];
			const yAssignment = ast.program.body[1];

			const cfg = new _controlFlowGraph2.default();
			cfg.createNode(xAssignment);
			cfg.createNode(yAssignment);

			// act
			const dot = (0, _dot.cfgToDot)(cfg, { stable: true });

			// assert
			(0, _chai.expect)(dot).to.equal(`digraph cfg {
  "0" [ label = "2 const x = 10" ];
  "1" [ label = "3 const y = 11" ];
}`);
		});

		it("creates an edge for each successor of a node", () => {
			// arrange
			const ast = (0, _babylon.parse)(`
				const x = 10;
				const y = 11;
				const z = 12;
			`);

			const xAssignment = ast.program.body[0];
			const yAssignment = ast.program.body[1];
			const zAssignment = ast.program.body[2];

			const cfg = new _controlFlowGraph2.default();
			cfg.connectIfNotFound(xAssignment, _controlFlowGraph.BRANCHES.UNCONDITIONAL, yAssignment);
			cfg.connectIfNotFound(yAssignment, _controlFlowGraph.BRANCHES.UNCONDITIONAL, zAssignment);
			cfg.connectIfNotFound(zAssignment, _controlFlowGraph.BRANCHES.UNCONDITIONAL, null);

			// act
			const dot = (0, _dot.cfgToDot)(cfg, { stable: true });

			// assert
			(0, _chai.expect)(dot).to.equal(`digraph cfg {
  "0" [ label = "2 const x = 10" ];
  "1" [ label = "3 const y = 11" ];
  "2" [ label = "4 const z = 12" ];
  "3" [ label = "EOF" ];
  "0" -> "1" [ label = "Unconditional" ];
  "1" -> "2" [ label = "Unconditional" ];
  "2" -> "3" [ label = "Unconditional" ];
}`);
		});
	});
});
//# sourceMappingURL=dot.spec.js.map
