"use strict";

var _sinon = require("sinon");

var _sinon2 = _interopRequireDefault(_sinon);

var _chai = require("chai");

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

var _program = require("../../../lib/semantic-model/program");

var _hindleyMilnerContext = require("../../../lib/type-inference/hindley-milner-context");

var _typeInferenceContext = require("../../../lib/type-inference/type-inference-context");

var _types = require("../../../lib/semantic-model/types");

var _forStatementRefinementRule = require("../../../lib/type-inference/refinement-rules/for-statement-refinement-rule");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("ForStatementRefinementRule", function () {
	let context, rule, program, init, test, update;

	beforeEach(function () {
		program = new _program.Program();
		context = new _hindleyMilnerContext.HindleyMilnerContext(null, new _typeInferenceContext.TypeInferenceContext(program));
		rule = new _forStatementRefinementRule.ForStatementRefinementRule();
		init = t.assignmentExpression("=", t.identifier("x"), t.numericLiteral(10));
		test = t.binaryExpression("<", t.identifier("x"), t.numericLiteral(100));
		update = t.updateExpression("++", t.identifier("x"));
	});

	describe("canRefine", function () {
		it("returns true if the node is a for statement", function () {
			// arrange
			const forOfStatement = t.forStatement(init, test, update, t.blockStatement([]));

			// act, assert
			(0, _chai.expect)(rule.canRefine(forOfStatement)).to.be.true;
		});

		it("returns false if the node is not a for statement", function () {
			(0, _chai.expect)(rule.canRefine(t.identifier("x"))).to.be.false;
		});
	});

	describe("refine", function () {
		it("returns type void", function () {
			// arrange
			const forStatement = t.forStatement(init, test, update, t.blockStatement([]));

			_sinon2.default.stub(context, "infer").withArgs(init).returns(_types.TypeVariable.create()).withArgs(test).returns(_types.BooleanType.create()).withArgs(update).returns(_types.NumberType.create());

			// act, assert
			(0, _chai.expect)(rule.refine(forStatement, context)).to.be.instanceOf(_types.VoidType);
		});

		it("infers the type for init, test and update", function () {
			// arrange
			const forStatement = t.forStatement(init, test, update, t.blockStatement([]));

			_sinon2.default.stub(context, "infer").withArgs(init).returns(_types.TypeVariable.create()).withArgs(test).returns(_types.BooleanType.create()).withArgs(update).returns(_types.NumberType.create());

			// act
			rule.refine(forStatement, context);

			// assert
			_sinon2.default.assert.calledWith(context.infer, init);
			_sinon2.default.assert.calledWith(context.infer, test);
			_sinon2.default.assert.calledWith(context.infer, update);
		});

		it("can handle a for statement without init, test and update", function () {
			// arrange
			const forStatement = t.forStatement(null, null, null, t.blockStatement([]));
			_sinon2.default.stub(context, "infer");

			// act
			rule.refine(forStatement, context);

			// assert
			_sinon2.default.assert.notCalled(context.infer);
		});
	});
});
//# sourceMappingURL=for-statement-refinement-rule.spec.js.map
