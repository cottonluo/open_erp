"use strict";

var _chai = require("chai");

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

var _sinon = require("sinon");

var _sinon2 = _interopRequireDefault(_sinon);

var _binaryOperators = require("../../../lib/type-inference/refinement-rules/binary-operators");

var _binaryOperators2 = _interopRequireDefault(_binaryOperators);

var _binaryExpressionRefinementRule = require("../../../lib/type-inference/refinement-rules/binary-expression-refinement-rule");

var _types = require("../../../lib/semantic-model/types");

var _hindleyMilnerContext = require("../../../lib/type-inference/hindley-milner-context");

var _typeInferenceContext = require("../../../lib/type-inference/type-inference-context");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

describe("BinaryExpressionRefinementRule", function () {
	let rule, context, sandbox, program;

	beforeEach(function () {
		sandbox = _sinon2.default.sandbox.create();
		context = new _hindleyMilnerContext.HindleyMilnerContext(null, new _typeInferenceContext.TypeInferenceContext(program));
		sandbox.stub(context, "infer");
		rule = new _binaryExpressionRefinementRule.BinaryExpressionRefinementRule();
	});

	afterEach(function () {
		sandbox.restore();
	});

	describe("canRefine", function () {
		it("returns true for a binary expression declaration", function () {
			// arrange
			const binaryExpression = t.binaryExpression("+", t.identifier("x"), t.identifier("y"));

			// act, asserts
			(0, _chai.expect)(rule.canRefine(binaryExpression)).to.be.true;
		});

		it("returns false in the other cases", function () {
			// arrange
			const identifier = t.identifier("x");

			// act, assert
			(0, _chai.expect)(rule.canRefine(identifier)).to.be.false;
		});
	});

	describe("refine", function () {
		it("throws if the operator is not supported", function () {
			// arrange
			const illegalAssignmentOperator = t.assignmentExpression("$", t.identifier("x"), t.numericLiteral(4));

			// act, assert
			(0, _chai.expect)(() => rule.refine(illegalAssignmentOperator, context)).to.throw("Type inference failure: The binary operator $ is not supported.");
		});

		it("uses the binary operator with the given name to refine the type", function () {
			// arrange
			const addExpression = t.binaryExpression("+", t.nullLiteral(), t.numericLiteral(4));
			const nullType = _types.NullType.create();
			const numberType = _types.NumberType.create();

			sandbox.stub(_binaryOperators2.default["+"], "refine").returns(_types.NumberType.create());

			context.infer.withArgs(addExpression.left).returns(nullType);
			context.infer.withArgs(addExpression.right).returns(numberType);

			// act
			const refined = rule.refine(addExpression, context);

			// assert
			_sinon2.default.assert.calledWithExactly(_binaryOperators2.default["+"].refine, _sinon2.default.match.instanceOf(_types.NullType), _sinon2.default.match.instanceOf(_types.NumberType), _sinon2.default.match.func);
			(0, _chai.expect)(refined).to.be.instanceOf(_types.NumberType);
		});
	});
});
//# sourceMappingURL=binary-expression-refinement-rule.spec.js.map
