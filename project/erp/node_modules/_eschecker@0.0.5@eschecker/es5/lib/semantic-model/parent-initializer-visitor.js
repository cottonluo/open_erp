"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParentInitializerVisitor = undefined;

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function setParent(path) {
  path.node.parent = path.parent;
}

/**
 * Visitor that sets the parent node on each node. This allows upwards traversal when only the node is known without
 * the need for babel-traverse
 */
const ParentInitializerVisitor = exports.ParentInitializerVisitor = {};

// visitors merge does not support enter or exit, so we need to explicitly set the statement for each node.
for (const type in t.VISITOR_KEYS) {
  ParentInitializerVisitor[type] = setParent;
}

exports.default = ParentInitializerVisitor;
//# sourceMappingURL=parent-initializer-visitor.js.map
