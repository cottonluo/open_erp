"use strict";

var _chai = require("chai");

var _anyUnificationRule = require("../../../lib/type-inference/unification-rules/any-unification-rule");

var _anyUnificationRule2 = _interopRequireDefault(_anyUnificationRule);

var _index = require("../../../lib/semantic-model/types/index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("AnyUnificationRule", function () {
	let rule;

	beforeEach(function () {
		rule = new _anyUnificationRule2.default();
	});

	describe("canUnify", function () {
		it("returns true if t1 is an any type", function () {
			(0, _chai.expect)(rule.canUnify(_index.AnyType.create(), _index.NumberType.create())).to.be.true;
		});

		it("returns true if t2 is an any type", function () {
			(0, _chai.expect)(rule.canUnify(_index.NumberType.create(), _index.AnyType.create())).to.be.true;
		});

		it("returns false if neither t1 nor t2 is an any type", function () {
			(0, _chai.expect)(rule.canUnify(_index.NumberType.create(), _index.NumberType.create())).to.be.false;
		});
	});

	describe("unify", function () {
		it("returns any", function () {
			// act, assert
			(0, _chai.expect)(rule.unify(_index.NumberType.create(), _index.AnyType.create())).to.be.instanceOf(_index.AnyType);
		});
	});
});
//# sourceMappingURL=any-unification-rule.spec.js.map
