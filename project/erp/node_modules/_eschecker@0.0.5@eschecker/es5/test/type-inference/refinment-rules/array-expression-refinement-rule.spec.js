"use strict";

var _chai = require("chai");

var _sinon = require("sinon");

var _sinon2 = _interopRequireDefault(_sinon);

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

var _program = require("../../../lib/semantic-model/program");

var _hindleyMilnerContext = require("../../../lib/type-inference/hindley-milner-context");

var _typeInferenceContext = require("../../../lib/type-inference/type-inference-context");

var _arrayExpressionRefinementRule = require("../../../lib/type-inference/refinement-rules/array-expression-refinement-rule");

var _types = require("../../../lib/semantic-model/types");

var _typeUnificator = require("../../../lib/type-inference/type-unificator");

var _typeInferenceError = require("../../../lib/type-inference/type-inference-error");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("ArrayExpressionRefinementRule", function () {
	let context, rule, program;

	beforeEach(function () {
		program = new _program.Program();
		context = new _hindleyMilnerContext.HindleyMilnerContext(null, new _typeInferenceContext.TypeInferenceContext(program));
		rule = new _arrayExpressionRefinementRule.ArrayExpressionRefinementRule();
	});

	describe("canRefine", function () {
		it("returns true for an array expression", function () {
			(0, _chai.expect)(rule.canRefine(t.arrayExpression([t.numericLiteral(5), t.numericLiteral(4)]))).to.be.true;
		});

		it("returns false for if the node is not an array expression", function () {
			(0, _chai.expect)(rule.canRefine(t.numericLiteral(5))).to.be.false;
		});
	});

	describe("refine", function () {
		it("returns an array with a type variable as it's T if the array does not contain any elements", function () {
			// act
			const arrayType = rule.refine(t.arrayExpression(), context);

			// assert
			(0, _chai.expect)(arrayType).to.be.an.instanceOf(_types.ArrayType);
			(0, _chai.expect)(arrayType.of).to.be.an.instanceOf(_types.TypeVariable);
		});

		it("returns an array of the element's type", function () {
			// arrange
			const arrayExpression = t.arrayExpression([t.numericLiteral(5), t.numericLiteral(5)]);
			_sinon2.default.stub(context, "infer").withArgs(arrayExpression.elements[0]).returns(_types.NumberType.create()).withArgs(arrayExpression.elements[0]).returns(_types.NumberType.create());

			_sinon2.default.stub(context, "unify").returns(_types.NumberType.create());

			// act
			const arrayType = rule.refine(arrayExpression, context);

			// assert
			(0, _chai.expect)(arrayType).to.be.an.instanceOf(_types.ArrayType);
			(0, _chai.expect)(arrayType.of).to.be.an.instanceOf(_types.NumberType);
		});

		it("returns an array of type Any if the elements are not unifiable", function () {
			// arrange
			const arrayExpression = t.arrayExpression([t.numericLiteral(5), t.numericLiteral(5)]);
			_sinon2.default.stub(context, "infer").withArgs(arrayExpression.elements[0]).returns(_types.StringType.create()).withArgs(arrayExpression.elements[0]).returns(_types.NumberType.create());

			const unificationError = new _typeUnificator.NotUnifiableError(_types.StringType.create(), _types.NumberType.create());
			_sinon2.default.stub(context, "unify").throws(new _typeInferenceError.TypeInferenceError(unificationError, arrayExpression.elements[1]));

			// act
			const arrayType = rule.refine(arrayExpression, context);

			// assert
			(0, _chai.expect)(arrayType).to.be.an.instanceOf(_types.ArrayType);
			(0, _chai.expect)(arrayType.of).to.be.an.instanceOf(_types.AnyType);
		});
	});
});
//# sourceMappingURL=array-expression-refinement-rule.spec.js.map
