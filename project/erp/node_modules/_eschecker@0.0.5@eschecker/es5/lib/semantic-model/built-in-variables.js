"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.addBuiltInVariables = addBuiltInVariables;
exports.addsTypesOfBuiltInVariables = addsTypesOfBuiltInVariables;

var _assert = require("assert");

var _assert2 = _interopRequireDefault(_assert);

var _symbol = require("./symbol");

var _types = require("./types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Adds the built in variables like console to the passed in scope.
 *
 * @param {Scope} scope the scope to which the operations should be added
 */
function addBuiltInVariables(scope) {
	scope.addSymbol(new _symbol.Symbol("console", _symbol.SymbolFlags.Variable));
	scope.addSymbol(new _symbol.Symbol("document", _symbol.SymbolFlags.Variable));
	scope.addSymbol(new _symbol.Symbol("Object", _symbol.SymbolFlags.Variable));
}

/**
 * Adds the types of the built in variables to the type environment
 * @param {Scope} scope the global scope that contains the built in variables
 * @param {TypeEnvironment} typeEnvironment the type environment to which the types should be added
 * @returns {TypeEnvironment} type environment that contains the types for the built in operations
 */
function addsTypesOfBuiltInVariables(scope, typeEnvironment) {
	const console = getSymbolOrThrow(scope, "console");
	const consoleType = _types.ObjectType.create([[new _symbol.Symbol("log", _symbol.SymbolFlags.Function | _symbol.SymbolFlags.Property), new _types.FunctionType(_types.AnyType.create(), [_types.AnyType.create(), _types.AnyType.create()], _types.VoidType.create())]]);

	const evt = _types.ObjectType.create([[new _symbol.Symbol("bubbles", _symbol.SymbolFlags.Property), _types.BooleanType.create()], [new _symbol.Symbol("cancelable", _symbol.SymbolFlags.Property), _types.BooleanType.create()], [new _symbol.Symbol("defaultPrevented", _symbol.SymbolFlags.Property), _types.BooleanType.create()], [new _symbol.Symbol("type", _symbol.SymbolFlags.Property), _types.StringType.create()], [new _symbol.Symbol("preventDefault", _symbol.SymbolFlags.Property | _symbol.SymbolFlags.Function), new _types.FunctionType(_types.AnyType.create(), [], _types.VoidType.create())], [new _symbol.Symbol("stopImmediatePropagation", _symbol.SymbolFlags.Property | _symbol.SymbolFlags.Function), new _types.FunctionType(_types.AnyType.create(), [], _types.VoidType.create())], [new _symbol.Symbol("stopPropagation", _symbol.SymbolFlags.Property | _symbol.SymbolFlags.Function), new _types.FunctionType(_types.AnyType.create(), [], _types.VoidType.create())]]);

	const eventListener = new _types.FunctionType(_types.AnyType.create(), [evt], _types.AnyType.create());
	const elementType = _types.ObjectType.create([[new _symbol.Symbol("addEventListener", _symbol.SymbolFlags.Function | _symbol.SymbolFlags.Property), new _types.FunctionType(_types.AnyType.create(), [_types.StringType.create(), eventListener, _types.AnyType.create(), _types.AnyType.create()], _types.VoidType.create())]]);

	const document = getSymbolOrThrow(scope, "document");
	const documentType = _types.ObjectType.create([[new _symbol.Symbol("getElementById", _symbol.SymbolFlags.Function | _symbol.SymbolFlags.Property), new _types.FunctionType(_types.AnyType.create(), [_types.StringType.create()], _types.MaybeType.of(elementType))]]);

	const object = getSymbolOrThrow(scope, "Object");
	const objectType = _types.ObjectType.create([[new _symbol.Symbol("keys", _symbol.SymbolFlags.Property | _symbol.SymbolFlags.Function), new _types.FunctionType(_types.AnyType.create(), [_types.ObjectType.create()], _types.ArrayType.of(_types.StringType.create()))]]);

	return typeEnvironment.setType(console, consoleType).setType(document, documentType).setType(object, objectType);
}

function getSymbolOrThrow(scope, name) {
	const symbol = scope.getOwnSymbol(name);

	(0, _assert2.default)(symbol, "The symbol '${name}' does not exist in the given scope.");
	return symbol;
}
//# sourceMappingURL=built-in-variables.js.map
