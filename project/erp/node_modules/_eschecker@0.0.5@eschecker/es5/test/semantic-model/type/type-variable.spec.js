"use strict";

var _chai = require("chai");

var _index = require("../../../lib/semantic-model/types/index");

describe("TypeVariable", function () {
	describe("fresh", function () {
		it("returns a new instance", function () {
			// arrange
			const original = new _index.TypeVariable();

			// act, assert
			(0, _chai.expect)(original.fresh()).not.to.equal(original);
		});
	});

	describe("isTypeVariable", function () {
		it("returns true", function () {
			(0, _chai.expect)(new _index.TypeVariable().isTypeVariable).to.be.true;
		});
	});

	describe("isBaseType", function () {
		it("returns false", function () {
			(0, _chai.expect)(new _index.TypeVariable().isBaseType).to.be.false;
		});
	});

	describe("equals", function () {
		it("returns true if the same instance is passed", function () {
			// arrange
			const variable = new _index.TypeVariable();

			// act, assert
			(0, _chai.expect)(variable.equals(variable)).to.be.true;
		});

		it("returns false if another instance is  passed", function () {
			// arrange
			const first = new _index.TypeVariable();
			const second = new _index.TypeVariable();

			// act, assert
			(0, _chai.expect)(first.equals(second)).to.be.false;
		});
	});

	describe("isSubType", function () {
		it("returns true", function () {
			// arrange
			const first = new _index.TypeVariable();
			const second = new _index.TypeVariable();

			// act, assert
			(0, _chai.expect)(first.isSubType(second)).to.be.true;
		});
	});
});
//# sourceMappingURL=type-variable.spec.js.map
