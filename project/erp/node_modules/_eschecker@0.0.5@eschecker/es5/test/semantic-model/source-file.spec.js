"use strict";

var _chai = require("chai");

var _sourceFile = require("../../lib/semantic-model/source-file");

var _sourceFile2 = _interopRequireDefault(_sourceFile);

var _scope = require("../../lib/semantic-model/scope");

var _scope2 = _interopRequireDefault(_scope);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("SourceFile", function () {

	let sourceFile;
	let globalScope;

	beforeEach(function () {
		globalScope = new _scope2.default();
		sourceFile = new _sourceFile2.default("source-file.specs.js", "let x = 10;", globalScope);
	});

	describe("scope", function () {
		it("has it's own scope that has the global scope as it's parent", function () {
			// assert
			(0, _chai.expect)(sourceFile.scope).not.to.equal(globalScope);
			(0, _chai.expect)(sourceFile.scope).to.have.property("parent").that.equals(globalScope);
		});
	});

	describe("parse", function () {
		it("parses the text of the source file and assigns the ast to the ast member", function () {
			// act
			sourceFile.parse();

			(0, _chai.expect)(sourceFile.ast).to.have.property("program");
		});

		it("can parse es6 modules", function () {
			// arrange
			sourceFile.text = "export const x = 10;";

			// act
			sourceFile.parse();

			// assert
			(0, _chai.expect)(sourceFile.ast).to.have.property("program");
		});

		it("includes the source filename in the loc", function () {
			// act
			sourceFile.parse();

			// assert
			(0, _chai.expect)(sourceFile.ast.program.loc).to.have.property("filename").that.equals("source-file.specs.js");
		});
	});
});
//# sourceMappingURL=source-file.spec.js.map
