"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.TUndefinedUnificationRule = undefined;

var _types = require("../../semantic-model/types");

/**
 * Unification rule that unifies a undefined value with any other value.
 * The type always resolves to the other type as this type is more specific than undefined (undefined is just an arbitrary,
 * not yet initialized type).
 *
 * @implements BaseTypeUnificationRule
 */
class TUndefinedUnificationRule {
	canUnify(t1, t2) {
		const voidType = this._getVoidType(t1, t2);
		return !!voidType.undefined && !(voidType.other instanceof _types.AnyType);
	}

	unify(t1, t2) {
		return t1 instanceof _types.VoidType ? t2 : t1;
	}

	_getVoidType(t1, t2) {
		if (t1 instanceof _types.VoidType) {
			return { undefined: t1, other: t2 };
		}

		if (t2 instanceof _types.VoidType) {
			return { undefined: t2, other: t1 };
		}

		return {};
	}
}

exports.TUndefinedUnificationRule = TUndefinedUnificationRule;
exports.default = TUndefinedUnificationRule;
//# sourceMappingURL=t-undefined-unification-rule.js.map
