"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.StringType = undefined;

var _immutable = require("immutable");

var _immutable2 = _interopRequireDefault(_immutable);

var _assert = require("assert");

var _assert2 = _interopRequireDefault(_assert);

var _recordType = require("./record-type");

var _numberType = require("./number-type");

var _functionType = require("./function-type");

var _maybeType = require("./maybe-type");

var _booleanType = require("./boolean-type");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let builtIns;

/**
 * string type
 */
class StringType extends _recordType.RecordType {

	static create() {
		return instance;
	}

	get prettyName() {
		return "string";
	}

	fresh() {
		return this;
	}

	hasProperty(symbol) {
		return builtIns.has(symbol.name);
	}

	getType(symbol) {
		return builtIns.get(symbol.name);
	}

	setType() {
		_assert2.default.fail("Cannot modify properties of the built in type string");
	}
}

exports.StringType = StringType;
const instance = new StringType();

builtIns = new _immutable2.default.Map([["length", _numberType.NumberType.create()], ["charAt", new _functionType.FunctionType(instance, [_numberType.NumberType.create()], instance)], ["charCodeAt", new _functionType.FunctionType(instance, [_numberType.NumberType.create()], _numberType.NumberType.create())], ["codePointAt", new _functionType.FunctionType(instance, [_numberType.NumberType.create()], _numberType.NumberType.create())],
// TODO concat requires varargs
// ["concat", new FunctionType(stringT, [numberT], numberT)]
["endsWith", new _functionType.FunctionType(instance, [instance, _maybeType.MaybeType.of(_numberType.NumberType.create())], _booleanType.BooleanType.create())], ["includes", new _functionType.FunctionType(instance, [instance, _maybeType.MaybeType.of(_numberType.NumberType.create())], _booleanType.BooleanType.create())], ["indexOf", new _functionType.FunctionType(instance, [instance, _maybeType.MaybeType.of(_numberType.NumberType.create())], _numberType.NumberType.create())], ["lastIndexOf", new _functionType.FunctionType(instance, [instance, _maybeType.MaybeType.of(_numberType.NumberType.create())], _numberType.NumberType.create())],
// TODO match requires regex
["normalize", new _functionType.FunctionType(instance, [_maybeType.MaybeType.of(instance)], instance)], // TODO from is an enum
["repeat", new _functionType.FunctionType(instance, [_numberType.NumberType.create()], instance)], ["replace", new _functionType.FunctionType(instance, [instance, instance], _numberType.NumberType.create())], // TODO old can be regex or string, new can be string or function, requires union
// TODO search requires regex
["slice", new _functionType.FunctionType(instance, [_numberType.NumberType.create(), _maybeType.MaybeType.of(_numberType.NumberType.create())], instance)],
// TODO fails because of cycels in import ["split", new FunctionType(instance, [MaybeType.of(instance), MaybeType.of(NumberType.create())], ArrayType.of(instance))]
["startsWith", new _functionType.FunctionType(instance, [instance, _maybeType.MaybeType.of(_numberType.NumberType.create())], _booleanType.BooleanType.create())], ["substr", new _functionType.FunctionType(instance, [instance, _maybeType.MaybeType.of(_numberType.NumberType.create())], instance)], ["substring", new _functionType.FunctionType(instance, [_numberType.NumberType.create(), _maybeType.MaybeType.of(_numberType.NumberType.create())], instance)], ["toLocaleLowerCase", new _functionType.FunctionType(instance, [], instance)], ["toLocaleUpperCase", new _functionType.FunctionType(instance, [], instance)], ["toLowerCase", new _functionType.FunctionType(instance, [], instance)], ["toString", new _functionType.FunctionType(instance, [], instance)], ["toUpperCase", new _functionType.FunctionType(instance, [], instance)], ["trim", new _functionType.FunctionType(instance, [], instance)], ["valueOf", new _functionType.FunctionType(instance, [], instance)]
// TODO string.raw
]);

exports.default = StringType;
//# sourceMappingURL=string-type.js.map
