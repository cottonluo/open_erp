"use strict";

var _chai = require("chai");

var _nullMaybeUnificationRule = require("../../../lib/type-inference/unification-rules/null-maybe-unification-rule");

var _nullMaybeUnificationRule2 = _interopRequireDefault(_nullMaybeUnificationRule);

var _index = require("../../../lib/semantic-model/types/index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("NullMaybeUnificationRule", function () {
	let rule;

	beforeEach(function () {
		rule = new _nullMaybeUnificationRule2.default();
	});

	describe("canUnify", function () {
		it("returns true if t1 is maybe type and t2 is null type", function () {
			(0, _chai.expect)(rule.canUnify(_index.MaybeType.of(new _index.Type("number")), _index.NullType.create())).to.be.true;
		});

		it("returns true if t1 is null type and t2 is maybe type", function () {
			(0, _chai.expect)(rule.canUnify(_index.NullType.create(), _index.MaybeType.of(new _index.Type("number")))).to.be.true;
		});

		it("returns false if t1 is neither null nor maybe type", function () {
			(0, _chai.expect)(rule.canUnify(new _index.Type("number"), _index.MaybeType.of(new _index.Type("number")))).to.be.false;
		});

		it("returns false if t2 is neither null nor maybe type", function () {
			(0, _chai.expect)(rule.canUnify(_index.MaybeType.of(new _index.Type("number")), new _index.Type("number"))).to.be.false;
		});
	});

	describe("unify", function () {
		it("returns the t1 if t1 is the maybe type", function () {
			// arrange
			const maybe = _index.MaybeType.of(new _index.Type("number"));

			// act, assert
			(0, _chai.expect)(rule.unify(maybe, _index.NullType.create())).to.equal(maybe);
		});

		it("returns the t2 if t2 is the maybe type", function () {
			// arrange
			const maybe = _index.MaybeType.of(new _index.Type("number"));

			// act, assert
			(0, _chai.expect)(rule.unify(_index.NullType.create(), maybe)).to.equal(maybe);
		});
	});
});
//# sourceMappingURL=null-maybe-unification-rule.spec.js.map
