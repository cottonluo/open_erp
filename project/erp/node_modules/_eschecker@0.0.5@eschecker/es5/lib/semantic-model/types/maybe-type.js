"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.MaybeType = undefined;

var _assert = require("assert");

var _assert2 = _interopRequireDefault(_assert);

var _type = require("./type");

var _parametrizedType = require("./parametrized-type");

var _voidType = require("./void-type");

var _nullType = require("./null-type");

var _numberType = require("./number-type");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let maybeNumber;

/**
 * A maybe type of T can either be null, undefined or any value of T.
 */
class MaybeType extends _parametrizedType.ParametrizedType {

	/**
  * Creates a new maybe type of the given type
  * @param {Type} t the type of which the maybe type is
  * @returns {MaybeType} the created maybe type
     */
	static of(t) {
		if (t instanceof _numberType.NumberType) {
			return maybeNumber = maybeNumber || new MaybeType(_numberType.NumberType.create());
		}

		return new MaybeType(t);
	}

	/**
  * Creates a new maybe type of Type `of`
  * @param {Type} of the generic type
  * @param [id] the id that identifies this type
  */
	constructor(of, id) {
		(0, _assert2.default)(of instanceof _type.Type, "the generic type argument of needs to be an instance of Type");
		super("Maybe", id);
		this.of = of;
	}

	get typeParameters() {
		return [this.of];
	}

	withTypeParameters(value, id) {
		(0, _assert2.default)(value.length === 1, "A maybe type can only have one type parameter");

		return new MaybeType(value[0], id);
	}

	/**
  * A type t is a subtype of the maybe type if the type is void, null or is a subtype of the type wrapped by the maybe.
  * Void and null need to be subtypes to allow absent function parameters to be passed as undefined
  * @param {Type} t the type of the type to test if it is a sub type of this maybe type
  * @returns {boolean} true if t is a subtype
     */
	isSubType(t) {
		return super.isSubType(t) || t instanceof _nullType.NullType || t instanceof _voidType.VoidType || this.of.isSubType(t);
	}
}

exports.MaybeType = MaybeType;
exports.default = MaybeType;
//# sourceMappingURL=maybe-type.js.map
