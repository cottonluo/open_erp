"use strict";

var _chai = require("chai");

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

var _blockStatementRefinementRule = require("../../../lib/type-inference/refinement-rules/block-statement-refinement-rule");

var _types = require("../../../lib/semantic-model/types");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

describe("BlockStatementRefinementRule", function () {
	let rule, blockStatement;

	beforeEach(function () {
		rule = new _blockStatementRefinementRule.BlockStatementRefinementRule();
		blockStatement = t.blockStatement([]);
	});

	describe("canRefine", function () {
		it("returns true for a block statement", function () {
			(0, _chai.expect)(rule.canRefine(blockStatement)).to.be.true;
		});

		it("returns false otherwise", function () {
			(0, _chai.expect)(rule.canRefine(t.numericLiteral(4))).to.be.false;
		});
	});

	describe("refine", function () {
		it("returns VoidType", function () {
			(0, _chai.expect)(rule.refine(blockStatement, null)).to.be.instanceOf(_types.VoidType);
		});
	});
});
//# sourceMappingURL=block-statement-refinement-rule.spec.js.map
