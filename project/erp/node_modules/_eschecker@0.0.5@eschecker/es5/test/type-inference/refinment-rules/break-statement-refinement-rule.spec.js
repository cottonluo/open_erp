"use strict";

var _chai = require("chai");

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

var _program = require("../../../lib/semantic-model/program");

var _hindleyMilnerContext = require("../../../lib/type-inference/hindley-milner-context");

var _typeInferenceContext = require("../../../lib/type-inference/type-inference-context");

var _types = require("../../../lib/semantic-model/types");

var _breakStatementRefinementRule = require("../../../lib/type-inference/refinement-rules/break-statement-refinement-rule");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

describe("BreakStatementRefinementRule", function () {
	let context, rule, program;

	beforeEach(function () {
		program = new _program.Program();
		context = new _hindleyMilnerContext.HindleyMilnerContext(null, new _typeInferenceContext.TypeInferenceContext(program));
		rule = new _breakStatementRefinementRule.BreakStatementRefinementRule();
	});

	describe("canRefine", function () {
		it("returns true if the node is a break statement", function () {
			(0, _chai.expect)(rule.canRefine(t.breakStatement())).to.be.true;
		});

		it("returns false if the node is not a break statement", function () {
			(0, _chai.expect)(rule.canRefine(t.identifier("x"))).to.be.false;
		});
	});

	describe("refine", function () {
		it("returns type void", function () {
			(0, _chai.expect)(rule.refine(t.breakStatement(), context)).to.be.instanceOf(_types.VoidType);
		});
	});
});
//# sourceMappingURL=break-statement-refinement-rule.spec.js.map
