"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.RecordType = undefined;

var _slicedToArray2 = require("babel-runtime/helpers/slicedToArray");

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _assert = require("assert");

var _assert2 = _interopRequireDefault(_assert);

var _immutable = require("immutable");

var _immutable2 = _interopRequireDefault(_immutable);

var _type = require("./type");

var _anyType = require("./any-type");

var _symbol = require("../symbol");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const EMPTY_PROPERTIES_MAP = new _immutable2.default.Map();

/**
 * A record type consists of null or multiple properties. A property has, for this record, unique name and a type.
 * The name is represented by a symbol.
 */
class RecordType extends _type.Type {

	/**
  * Creates a new record type pre initialized with the given properties
  * @param {function(properties: Immutable.Map<Member, Type>): RecordType} ctor constructor function of the type to instantiate
  * @param {Array.<Array.<?>>} properties array containing the properties. Each array entry is a tuple of symbol to type,
  * e.g. [[name, nameType], [age, ageType]]
  * @returns {RecordType} The created record type that has the given properties
  */
	static create(ctor) {
		let properties = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

		const map = new _immutable2.default.Map(properties.map(_ref => {
			var _ref2 = (0, _slicedToArray3.default)(_ref, 2);

			let symbol = _ref2[0];
			let type = _ref2[1];
			return [new Member(symbol), type];
		}));
		return new ctor(map);
	}

	/**
  * Creates a new record type
  * @param {Map.<Member, Type>} [properties] the properties of this record
  * @param [id] optional id
     */
	constructor() {
		let properties = arguments.length <= 0 || arguments[0] === undefined ? EMPTY_PROPERTIES_MAP : arguments[0];
		let id = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];

		super("record", id);
		this.properties = properties;
	}

	/**
  * Returns a string representation that is similar to the one js uses for object literals with the difference
  * that it is limited to a single line.
  * @returns {string}
  */
	get prettyName() {
		const properties = [...this.properties].map(_ref3 => {
			var _ref4 = (0, _slicedToArray3.default)(_ref3, 2);

			let member = _ref4[0];
			let type = _ref4[1];
			return `${ member.symbol }: ${ type }`;
		}).join(", ");
		return `{${ properties }}`;
	}

	/**
  * T is a subtype of this, if it contains the same properties and the types of all properties are a subtype of the
  * properties from this.
  * @param {Type} t type to check if it is a subtype
  * @returns {boolean} true if t is a subtype
     */
	isSubType(t) {
		if (this.constructor !== t.constructor) {
			return false;
		}

		for (const _ref5 of this.properties) {
			var _ref6 = (0, _slicedToArray3.default)(_ref5, 2);

			const member = _ref6[0];
			const propertyType = _ref6[1];

			const tPropertyType = t.getType(member.symbol);
			if (!tPropertyType || !propertyType.isSubType(tPropertyType)) {
				return false;
			}
		}

		return true;
	}

	fresh() {
		return this.withProperties(this.properties);
	}

	/**
  * Returns true if the record has a property with the given symbol
  * @param {Symbol} symbol the symbol of the property
  * @returns {boolean} true if a property with the given symbol exists
     */
	hasProperty(symbol) {
		// Might be, don't know
		if ((symbol.flags & _symbol.SymbolFlags.Computed) === _symbol.SymbolFlags.Computed) {
			return true;
		}

		return this.properties.has(new Member(symbol));
	}

	/**
  * Adds a property for the given symbol
  * @param {Symbol} symbol the symbol that identifies the property
  * @param {Type} type the type of the property
  * @throws if a property for the given symbol already exists
  * @returns {RecordType} new record type that has the new property with the same id
     */
	addProperty(symbol, type) {
		(0, _assert2.default)(symbol instanceof _symbol.Symbol, "the property symbol needs to be typeof Symbol");
		(0, _assert2.default)(type instanceof _type.Type, "Type needs to be an instanceof type");
		(0, _assert2.default)(!this.hasProperty(symbol), `A property with the name '${ symbol.name }' already exists`);

		return this.withProperties(this.properties.set(new Member(symbol), type), this.id);
	}

	/**
  * Returns the type of the property with the given symbol
  * @param {Symbol} symbol the symbol that identifies he property
  * @returns {Type} the type of the property or undefined if no such property exists
     */
	getType(symbol) {
		if ((symbol.flags & _symbol.SymbolFlags.Computed) === _symbol.SymbolFlags.Computed) {
			return _anyType.AnyType.create();
		}

		return this.properties.get(new Member(symbol));
	}

	/**
  * Updates the type of a property
  * @param {Symbol} symbol the symbol that identifies the property to update
  * @param {Type} type the new type
  * @returns {RecordType} the record where the type of the property has been changed to the new type
     */
	setType(symbol, type) {
		(0, _assert2.default)(symbol instanceof _symbol.Symbol, "the property symbol needs to be typeof Symbol");
		(0, _assert2.default)(type instanceof _type.Type, "The type needs to be an instance of Type");
		(0, _assert2.default)(this.hasProperty(symbol), "property does not yet exist, to add new properties use add property");

		if ((symbol.flags & _symbol.SymbolFlags.Computed) === _symbol.SymbolFlags.Computed) {
			return _anyType.AnyType.create();
		}

		return this.withProperties(this.properties.set(new Member(symbol), type), this.id);
	}

	substitute(oldType, newType) {
		if (this.same(oldType)) {
			return newType;
		}

		const mutated = this.properties.withMutations(map => {
			//noinspection JSAnnotator
			for (const _ref7 of map) {
				var _ref8 = (0, _slicedToArray3.default)(_ref7, 2);

				const member = _ref8[0];
				const type = _ref8[1];

				const substituted = type.substitute(oldType, newType);
				if (substituted !== type) {
					map.set(member, type.substitute(oldType, newType));
				}
			}
		});

		if (mutated.equals(this.properties)) {
			return this;
		}

		return this.withProperties(mutated, this.id);
	}

	/**
  * Returns true if the type is equal to this or is used in any of the properties
  * @param {Type} t2 type to check if it is used in this record type definition
  * @returns {boolean} true if the type is used to define the record type
     */
	containsType(t2) {
		if (super.containsType(t2)) {
			return true;
		}

		for (const propertyType of this.properties.values()) {
			if (propertyType.containsType(t2)) {
				return true;
			}
		}

		return false;
	}

	/**
  * Returns true if the other record defines exactly the same properties and all those properties have the same type
  * @param {Type} other the other type
  * @returns {boolean} true if the records are equal
     */
	equals(other) {
		if (!super.equals(other)) {
			return false;
		}

		return _immutable2.default.is(this.properties, other.properties);
	}

	/**
  * Returns a new instance that is equal to this, except that it uses the given properties
  * @param {Immutable.Map<Member, Type>} properties the properties
  * @param id the id of the new instance
  * @returns {RecordType} a new record type with the given properties
     */
	withProperties(properties, id) {
		return new this.constructor(properties, id);
	}
}

exports.RecordType = RecordType; /**
                                  * Wrapper for a symbol. Two members are equal if they have the same name and not if they are the same instance.
                                  */

class Member {
	/**
  * Creates a new member for the given symbol
  * @param {Symbol} symbol the symbol to wrap
     */
	constructor(symbol) {
		(0, _assert2.default)(symbol, "A symbol is required to create a member");
		this.symbol = symbol;
	}

	valueOf() {
		return this.symbol.name;
	}
}

exports.default = RecordType;
//# sourceMappingURL=record-type.js.map
