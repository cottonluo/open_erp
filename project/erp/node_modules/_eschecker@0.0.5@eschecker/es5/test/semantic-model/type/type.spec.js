"use strict";

var _chai = require("chai");

var _sinon = require("sinon");

var _sinon2 = _interopRequireDefault(_sinon);

var _index = require("../../../lib/semantic-model/types/index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("Type", function () {

	describe("isTypeVariable", function () {
		it("returns false", function () {
			// arrange
			const numberType = new _index.Type("number");

			// act, assert
			(0, _chai.expect)(numberType.isTypeVariable).to.be.false;
		});
	});

	describe("isBaseType", function () {
		it("returns true by default", function () {
			// arrange
			const numberType = new _index.Type("number");

			// assert
			(0, _chai.expect)(numberType.isBaseType).to.be.true;
		});
	});

	describe("fresh", function () {
		it("returns the same instance", function () {
			// arrange
			const string = new _index.Type("string");

			// act
			const fresh = string.fresh();

			// assert
			(0, _chai.expect)(fresh).to.equal(string);
		});
	});

	describe("containsType", function () {
		it("returns false for two different type instances", function () {
			// arrange
			const t1 = new _index.Type("number");
			const t2 = new _index.Type("number");

			_sinon2.default.stub(t2, "containsType").returns(false);

			// act, assert
			(0, _chai.expect)(t1.occursIn(t2)).to.be.false;
		});

		it("returns true if the two types are the same instance and therefore equal", function () {
			// arrange
			const t1 = new _index.Type("number");

			// act, assert
			(0, _chai.expect)(t1.containsType(t1)).to.be.true;
		});
	});

	describe("occursIn", function () {
		it("returns false if containsType of t2 returns false", function () {
			// arrange
			const t1 = new _index.Type("number");
			const t2 = new _index.Type("number");

			// act, assert
			(0, _chai.expect)(t1.occursIn(t2)).to.be.false;
		});

		it("returns true if the two types are the same instance and therefore equal", function () {
			// arrange
			const t1 = new _index.Type("number");
			_sinon2.default.stub(t1, "containsType").returns(true);

			// act, assert
			(0, _chai.expect)(t1.occursIn(t1)).to.be.true;
		});
	});

	describe("substitute", function () {
		it("returns this if this type is not the same as the old type", function () {
			// arrange
			const t = new _index.Type("number");

			// act, assert
			(0, _chai.expect)(t.substitute(new _index.Type("number"), new _index.Type("string"))).to.equal(t);
		});

		it("returns the new type if this type is the same as to the old type", function () {
			// arrange
			const t = new _index.Type("number");
			const newType = new _index.Type("Maybe");

			// act, assert
			(0, _chai.expect)(t.substitute(t, newType)).to.equal(newType);
		});
	});

	describe("prettyName", function () {
		it("returns the name of the type", function () {
			(0, _chai.expect)(new _index.Type("number").prettyName).to.equal("number");
		});
	});

	describe("toString", function () {
		it("returns the pretty name of the type", function () {
			// arrange
			const t1 = new class extends _index.Type {
				get prettyName() {
					return "I'm pretty";
				}
			}("number");

			// act, assert
			(0, _chai.expect)(t1.toString()).to.equal("I'm pretty");
		});
	});

	describe("isSameType", function () {
		it("returns true if both types have the same constructor (are from the same type)", function () {
			// arrange
			const first = new _index.Type("number");
			const second = new _index.Type("number");

			// act, assert
			(0, _chai.expect)(first.isSameType(second)).to.be.true;
		});

		it("returns true if both types have the same constructor but different type parameters", function () {
			// arrange
			const numberType = new _index.Type("number");
			const stringType = new _index.Type("string");
			const first = new _index.Type("array", numberType);
			const second = new _index.Type("array", stringType);

			// act, assert
			(0, _chai.expect)(first.isSameType(second)).to.be.true;
		});

		it("returns false if the types have not the same constructors", function () {
			// arrange
			const first = new _index.Type("number");
			const second = _index.MaybeType.of(new _index.Type("number"));

			// act, assert
			(0, _chai.expect)(first.isSameType(second)).to.be.false;
		});
	});

	describe("same", function () {
		it("returns true if both types are the same reference", function () {
			// arrange
			const t = new _index.Type("number");

			// act, assert
			(0, _chai.expect)(t.same(t)).to.be.true;
		});

		it("returns true if both types have the same id", function () {
			// arrange
			const t1 = new _index.Type("number", 10);
			const t2 = new _index.Type("number", 10);

			// act, assert
			(0, _chai.expect)(t1.same(t2)).to.be.true;
			(0, _chai.expect)(t2.same(t1)).to.be.true;
		});

		it("returns false if the types have different id's", function () {
			// arrange
			const t1 = new _index.Type("number");
			const t2 = new _index.Type("number");

			// act, assert
			(0, _chai.expect)(t1.same(t2)).to.be.false;
			(0, _chai.expect)(t2.same(t1)).to.be.false;
		});
	});

	describe("equals", function () {
		it("returns true if this is compared with itself", function () {
			// arrange
			const type = new _index.Type("number");

			// act, assert
			(0, _chai.expect)(type.equals(type)).to.be.true;
		});

		it("returns false if the types are not from the same kind", function () {
			// arrange
			const first = new _index.Type("number");
			const second = _index.MaybeType.of(new _index.Type("number"));

			// act, assert
			(0, _chai.expect)(first.equals(second)).to.be.false;
			(0, _chai.expect)(second.equals(first)).to.be.false;
		});
	});

	describe("isSubType", function () {
		it("returns true if the two types are equal", function () {
			// arrange
			const first = new _index.Type("number");
			const second = new _index.Type("number");

			// act, assert
			(0, _chai.expect)(first.isSubType(second)).to.be.true;
			(0, _chai.expect)(second.isSubType(first)).to.be.true;
		});

		it("returns false if the two types are not equal", function () {
			// arrange
			const first = new _index.Type("number");
			const second = _index.MaybeType.of(new _index.Type("number"));

			// act, assert
			(0, _chai.expect)(first.isSubType(second)).to.be.false;
		});
	});
});
//# sourceMappingURL=type.spec.js.map
