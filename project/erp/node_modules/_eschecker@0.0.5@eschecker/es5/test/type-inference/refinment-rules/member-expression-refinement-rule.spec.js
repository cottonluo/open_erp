"use strict";

var _chai = require("chai");

var _sinon = require("sinon");

var _sinon2 = _interopRequireDefault(_sinon);

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

var _symbol = require("../../../lib/semantic-model/symbol");

var _types = require("../../../lib/semantic-model/types");

var _hindleyMilnerContext = require("../../../lib/type-inference/hindley-milner-context");

var _memberExpressionRefinementRule = require("../../../lib/type-inference/refinement-rules/member-expression-refinement-rule");

var _typeInferenceContext = require("../../../lib/type-inference/type-inference-context");

var _program = require("../../../lib/semantic-model/program");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("MemberExpressionRefinementRule", function () {
	let rule, context, program, memberExpression, sandbox;

	beforeEach(function () {
		sandbox = _sinon2.default.sandbox.create();
		program = new _program.Program();
		context = new _hindleyMilnerContext.HindleyMilnerContext(null, new _typeInferenceContext.TypeInferenceContext(program));

		sandbox.stub(context, "unify");
		sandbox.stub(context, "infer");

		rule = new _memberExpressionRefinementRule.MemberExpressionRefinementRule();
		memberExpression = t.memberExpression(t.identifier("person"), t.identifier("name"));
	});

	afterEach(function () {
		sandbox.restore();
	});

	describe("canRefine", function () {
		it("returns true for a member expression", function () {
			(0, _chai.expect)(rule.canRefine(memberExpression)).to.be.true;
		});

		it("returns false otherwise", function () {
			(0, _chai.expect)(rule.canRefine(t.numericLiteral(4))).to.be.false;
		});
	});

	describe("refine", function () {

		it("returns the type of the member for known properties", function () {
			const personSymbol = new _symbol.Symbol("person", _symbol.SymbolFlags.Variable);
			const nameSymbol = new _symbol.Symbol("name", _symbol.SymbolFlags.Property);
			personSymbol.addMember(nameSymbol);

			program.symbolTable.setSymbol(memberExpression.object, personSymbol);
			program.symbolTable.setSymbol(memberExpression.property, nameSymbol);

			const personType = _types.ObjectType.create([[nameSymbol, _types.StringType.create()]]);
			context.infer.withArgs(memberExpression.object).returns(personType);

			// act
			const refined = rule.refine(memberExpression, context);

			// assert
			(0, _chai.expect)(refined).to.be.instanceOf(_types.StringType);
		});

		/**
   * The forward analysis infers what is known about a type and not what is required about a type.
   * Therefore if a member is accessed before it's explicit declaration (e.g. assignment, object literal...), then
   * we won't create a property for the record as it is not 100% sure if the record has this type. All that is known
   * is that the property therefor might be of the type undefined, so lets return undefined.
   */
		it("returns void for unknown members", function () {
			// arrange
			const nameSymbol = new _symbol.Symbol("name", _symbol.SymbolFlags.Property);
			const personSymbol = new _symbol.Symbol("person", _symbol.SymbolFlags.Variable);
			personSymbol.addMember(nameSymbol);

			program.symbolTable.setSymbol(memberExpression.object, personSymbol);
			program.symbolTable.setSymbol(memberExpression.property, nameSymbol);

			const personType = new _types.RecordType();
			context.infer.withArgs(memberExpression.object).returns(personType);

			// act
			const refined = rule.refine(memberExpression, context);

			// assert
			(0, _chai.expect)(refined).to.be.instanceOf(_types.VoidType);
		});

		it("returns any if the type of the object is any", function () {
			const personSymbol = new _symbol.Symbol("person", _symbol.SymbolFlags.Variable);
			const nameSymbol = new _symbol.Symbol("name", _symbol.SymbolFlags.Property);
			personSymbol.addMember(nameSymbol);

			program.symbolTable.setSymbol(memberExpression.object, personSymbol);
			program.symbolTable.setSymbol(memberExpression.property, nameSymbol);

			const personType = _types.AnyType.create();
			context.infer.withArgs(memberExpression.object).returns(personType);

			// act
			const refined = rule.refine(memberExpression, context);

			// assert
			(0, _chai.expect)(refined).to.be.instanceOf(_types.AnyType);
		});
	});
});
//# sourceMappingURL=member-expression-refinement-rule.spec.js.map
