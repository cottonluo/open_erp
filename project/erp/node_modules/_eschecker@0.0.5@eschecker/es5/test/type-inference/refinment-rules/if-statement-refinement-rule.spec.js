"use strict";

var _chai = require("chai");

var _sinon = require("sinon");

var _sinon2 = _interopRequireDefault(_sinon);

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

var _hindleyMilnerContext = require("../../../lib/type-inference/hindley-milner-context");

var _ifStatementRefinementRule = require("../../../lib/type-inference/refinement-rules/if-statement-refinement-rule");

var _types = require("../../../lib/semantic-model/types");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("IfStatementRefinementRule", function () {
	let rule, context, ifStatement, test;

	beforeEach(function () {
		rule = new _ifStatementRefinementRule.IfStatementRefinementRule();
		context = new _hindleyMilnerContext.HindleyMilnerContext();

		test = t.unaryExpression("!", t.identifier("x"));
		ifStatement = t.ifStatement(test, t.expressionStatement(t.callExpression(t.identifier("log"), [t.stringLiteral("x is falsy")])));
	});

	describe("canRefine", function () {
		it("returns true for an if statement", function () {
			(0, _chai.expect)(rule.canRefine(ifStatement)).to.be.true;
		});

		it("returns false if it is not an if statement", function () {
			(0, _chai.expect)(rule.canRefine(t.identifier("x"))).to.be.false;
		});
	});

	describe("refine", function () {
		it("infers the type for the test expression", function () {
			// arrange
			_sinon2.default.stub(context, "infer");

			// act
			rule.refine(ifStatement, context);

			// assert
			_sinon2.default.assert.calledWith(context.infer, test);
		});

		it("returns type void", function () {
			// arrange
			_sinon2.default.stub(context, "infer");

			// act, assert
			(0, _chai.expect)(rule.refine(ifStatement, context)).to.be.instanceOf(_types.VoidType);
		});
	});
});
//# sourceMappingURL=if-statement-refinement-rule.spec.js.map
