"use strict";

var _chai = require("chai");

var _sinon = require("sinon");

var _sinon2 = _interopRequireDefault(_sinon);

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

var _hindleyMilnerContext = require("../../../lib/type-inference/hindley-milner-context");

var _objectExpressionRefinementRule = require("../../../lib/type-inference/refinement-rules/object-expression-refinement-rule");

var _types = require("../../../lib/semantic-model/types");

var _symbol = require("../../../lib/semantic-model/symbol");

var _program = require("../../../lib/semantic-model/program");

var _typeInferenceContext = require("../../../lib/type-inference/type-inference-context");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("ObjectExpressRefinementRule", function () {
	let rule, context, program, objectExpression, sandbox;

	beforeEach(function () {
		sandbox = _sinon2.default.sandbox.create();
		program = new _program.Program();
		context = new _hindleyMilnerContext.HindleyMilnerContext(null, new _typeInferenceContext.TypeInferenceContext(program));
		sandbox.stub(context, "infer");

		rule = new _objectExpressionRefinementRule.ObjectExpressionRefinementRule();
		objectExpression = t.objectExpression([t.objectProperty(t.identifier("name"), t.stringLiteral("Micha")), t.objectProperty(t.identifier("age"), t.numericLiteral(26))]);
	});

	afterEach(function () {
		sandbox.restore();
	});

	describe("canRefine", function () {
		it("returns true for an object expression", function () {
			(0, _chai.expect)(rule.canRefine(objectExpression)).to.be.true;
		});

		it("returns false otherwise", function () {
			(0, _chai.expect)(rule.canRefine(t.numericLiteral(4))).to.be.false;
		});
	});

	describe("refine", function () {
		const person = new _symbol.Symbol("person", _symbol.SymbolFlags.Variable);
		const name = new _symbol.Symbol("name", _symbol.SymbolFlags.Property);
		const age = new _symbol.Symbol("age", _symbol.SymbolFlags.Property);
		person.addMember(name);
		person.addMember(age);

		beforeEach(function () {
			context.infer.withArgs(objectExpression.properties[0].value).returns(_types.StringType.create());
			context.infer.withArgs(objectExpression.properties[1].value).returns(_types.NumberType.create());
			program.symbolTable.setSymbol(objectExpression.properties[0], name);
			program.symbolTable.setSymbol(objectExpression.properties[1], age);
			program.symbolTable.setSymbol(objectExpression, person);
		});

		it("returns a record type", function () {
			// act
			const refined = rule.refine(objectExpression, context);

			// assert
			(0, _chai.expect)(refined).to.be.instanceOf(_types.RecordType);
		});

		it("adds a property for each property defined in the object expression", function () {
			// act
			const refined = rule.refine(objectExpression, context);

			// assert
			(0, _chai.expect)(refined.hasProperty(name)).to.be.true;
			(0, _chai.expect)(refined.hasProperty(age)).to.be.true;
		});

		it("resolves the types for the properties using context.infer", function () {
			// act
			const refined = rule.refine(objectExpression, context);

			// assert
			(0, _chai.expect)(refined.getType(name)).to.be.instanceOf(_types.StringType);
			(0, _chai.expect)(refined.getType(age)).to.be.instanceOf(_types.NumberType);
		});
	});
});
//# sourceMappingURL=object-expression-refinement-rule.spec.js.map
