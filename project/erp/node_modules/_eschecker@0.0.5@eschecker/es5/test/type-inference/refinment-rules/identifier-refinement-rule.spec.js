"use strict";

var _chai = require("chai");

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

var _identifierRefinementRule = require("../../../lib/type-inference/refinement-rules/identifier-refinement-rule");

var _hindleyMilnerContext = require("../../../lib/type-inference/hindley-milner-context");

var _types = require("../../../lib/semantic-model/types");

var _symbol = require("../../../lib/semantic-model/symbol");

var _program = require("../../../lib/semantic-model/program");

var _typeInferenceContext = require("../../../lib/type-inference/type-inference-context");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

describe("IdentifierRefinementRule", function () {
	let rule, context, program;

	beforeEach(function () {
		program = new _program.Program();
		context = new _hindleyMilnerContext.HindleyMilnerContext(null, new _typeInferenceContext.TypeInferenceContext(program));
		rule = new _identifierRefinementRule.IdentifierRefinementRule();
	});

	describe("canRefine", function () {
		it("returns true for an identifier", function () {
			// arrange
			const identifier = t.identifier("x");

			// act, assert
			(0, _chai.expect)(rule.canRefine(identifier)).to.be.true;
		});

		it("returns false for other nodes", function () {
			// arrange
			const stringLiteral = t.stringLiteral("x");

			// act, assert
			(0, _chai.expect)(rule.canRefine(stringLiteral)).to.be.false;
		});
	});

	describe("refine", function () {
		it("returns UndefinedType for the undefined identifier", function () {
			// arrange
			const undefinedIdentifier = t.identifier("undefined");

			// act, assert
			(0, _chai.expect)(rule.refine(undefinedIdentifier, context)).to.be.instanceOf(_types.VoidType);
		});

		it("resolves the type from the type environment", function () {
			// arrange
			const identifier = t.identifier("x");
			const type = _types.NumberType.create();
			const symbol = new _symbol.Symbol("x", _symbol.SymbolFlags.Variable);
			program.symbolTable.setSymbol(identifier, symbol);
			context.setType(symbol, type);

			// act
			const refinedType = rule.refine(identifier, context);

			// assert
			(0, _chai.expect)(refinedType).to.be.instanceOf(_types.NumberType);
		});

		it("throws an error if type of the identifier is not know and therefor the identifier has been used before it's declaration", function () {
			// arrange
			const identifier = t.identifier("x");
			const symbol = new _symbol.Symbol("x", _symbol.SymbolFlags.Variable);
			program.symbolTable.setSymbol(identifier, symbol);

			// act
			(0, _chai.expect)(() => rule.refine(identifier, context)).to.throw("Type inference failure: The symbol x is being used before it's declaration");
		});
	});
});
//# sourceMappingURL=identifier-refinement-rule.spec.js.map
