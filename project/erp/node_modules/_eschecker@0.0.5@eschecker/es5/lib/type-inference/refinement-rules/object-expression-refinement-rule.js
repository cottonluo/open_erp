"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.ObjectExpressionRefinementRule = undefined;

var _assert = require("assert");

var _assert2 = _interopRequireDefault(_assert);

var _types = require("../../semantic-model/types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Refinement rule for object expressions.
 *
 * The refinement creates a record type and adds one property for each property in the object expression.
 * The type of the property is inferred.
 *
 * @implements {RefinementRule}
 */
class ObjectExpressionRefinementRule {
	canRefine(node) {
		return node.type === "ObjectExpression";
	}

	refine(node, context) {
		const properties = [];

		for (const property of node.properties) {
			const symbol = context.getSymbol(property);
			const type = context.infer(property.value);

			(0, _assert2.default)(symbol, `The symbol for the property ${ property.key.name } is not set`);
			(0, _assert2.default)(type, `The type for the property ${ symbol.name } is missing`);

			properties.push([symbol, type]);
		}

		return _types.ObjectType.create(properties);
	}
}

exports.ObjectExpressionRefinementRule = ObjectExpressionRefinementRule;
exports.default = ObjectExpressionRefinementRule;
//# sourceMappingURL=object-expression-refinement-rule.js.map
