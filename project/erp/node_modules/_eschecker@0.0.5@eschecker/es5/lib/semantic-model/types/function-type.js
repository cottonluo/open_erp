"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.FunctionType = undefined;

var _toArray2 = require("babel-runtime/helpers/toArray");

var _toArray3 = _interopRequireDefault(_toArray2);

var _assert = require("assert");

var _assert2 = _interopRequireDefault(_assert);

var _type = require("./type");

var _parametrizedType = require("./parametrized-type");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Function (this, params): returnType where this is modeled as explicit parameter of the function
 */
class FunctionType extends _parametrizedType.ParametrizedType {
	/**
  * Creates a new function type
  * @param {Type} thisType the type of the this object
  * @param {Type[]} params array with the types of the parameters
  * @param {Type} returnType type of the returned value
  * @param {AstNode} [declaration=undefined] the node that declares the function. The value is not set if the type of the function is defined by an external definition
     * @param [id] id that identifies this function type
  * @param {TypeEnvironment} [typeEnvironment] the type environment of the declaration
     */
	constructor(thisType, params, returnType, declaration, id, typeEnvironment) {
		(0, _assert2.default)(thisType === null || thisType instanceof _type.Type, "the this type needs to be a type instance");
		(0, _assert2.default)(Array.isArray(params), "the function parameters need to be an array");
		(0, _assert2.default)(returnType instanceof _type.Type, "the return type needs to be a type instance");

		super("Function", id);

		/**
   * The type of this
   * @type {Type}
         */
		this.thisType = thisType;

		/**
   * Array that contains the types of the parameters
   * @type {Type[]}
         */
		this.params = params;

		/**
   * The type of the return value
   * @type {Type}
         */
		this.returnType = returnType;

		/**
   * The node that declares the function
   * @type {AstNode}
         */
		this.declaration = declaration;

		/**
   * The type environment of the declaration
   * @type {TypeEnvironment}
         */
		this.typeEnvironment = typeEnvironment;
	}

	get typeParameters() {
		return [this.thisType, this.returnType, ...this.params];
	}

	/**
  * Returns a prettier representation of the function name that includes the this and return type and also all parameter types
  * @returns {string} the pretty name
  */
	get prettyName() {
		return `${ this.thisType }.(${ this.params.join(", ") }) -> ${ this.returnType }`;
	}

	withTypeParameters(typeParameters, id) {
		var _typeParameters = (0, _toArray3.default)(typeParameters);

		const newThis = _typeParameters[0];
		const newReturnType = _typeParameters[1];

		const newParams = _typeParameters.slice(2);

		return new FunctionType(newThis, newParams, newReturnType, this.declaration, id, this.typeEnvironment);
	}
}

exports.FunctionType = FunctionType;
exports.default = FunctionType;
//# sourceMappingURL=function-type.js.map
