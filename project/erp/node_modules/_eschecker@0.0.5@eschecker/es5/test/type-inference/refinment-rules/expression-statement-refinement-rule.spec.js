"use strict";

var _chai = require("chai");

var _sinon = require("sinon");

var _sinon2 = _interopRequireDefault(_sinon);

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

var _hindleyMilnerContext = require("../../../lib/type-inference/hindley-milner-context");

var _expressionStatementRefinementRule = require("../../../lib/type-inference/refinement-rules/expression-statement-refinement-rule");

var _types = require("../../../lib/semantic-model/types");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("ExpressionStatementRefinementRule", function () {
	let rule, context, expressionStatement;

	beforeEach(function () {
		context = new _hindleyMilnerContext.HindleyMilnerContext();
		_sinon2.default.stub(context, "infer");
		rule = new _expressionStatementRefinementRule.ExpressionStatementRefinementRule();
		expressionStatement = t.expressionStatement(t.assignmentExpression("=", t.identifier("x"), t.numericLiteral(5)));
	});

	describe("canRefine", function () {
		it("returns true for an expression statement", function () {
			(0, _chai.expect)(rule.canRefine(expressionStatement)).to.be.true;
		});

		it("returns false otherwise", function () {
			(0, _chai.expect)(rule.canRefine(t.numericLiteral(4))).to.be.false;
		});
	});

	describe("refine", function () {
		it("returns VoidType", function () {
			(0, _chai.expect)(rule.refine(expressionStatement, context)).to.be.instanceOf(_types.VoidType);
		});

		it("infers the type of the expression", function () {
			// act
			rule.refine(expressionStatement, context);

			// assert
			_sinon2.default.assert.calledWithExactly(context.infer, expressionStatement.expression);
		});
	});
});
//# sourceMappingURL=expression-statement-refinement-rule.spec.js.map
