"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.TNullUnificationRule = undefined;

var _index = require("../../semantic-model/types/index");

/**
 * Unification rule that unifies a type T with the null type
 *
 * E.g. let x = null; x = 5; results in a unification of a null type and a number type. In this case the type is
 * Maybe<number> as the values of x can either be null or any valid number.
 *
 * @implements {BaseTypeUnificationRule}
 */
class TNullUnificationRule {
	canUnify(t1, t2) {
		var _getNullAndOtherType = this._getNullAndOtherType(t1, t2);

		const nullType = _getNullAndOtherType.nullType;
		const other = _getNullAndOtherType.other;

		return !!nullType && !(other instanceof _index.MaybeType || other instanceof _index.VoidType);
	}

	unify(t1, t2) {
		var _getNullAndOtherType2 = this._getNullAndOtherType(t1, t2);

		const other = _getNullAndOtherType2.other;

		return _index.MaybeType.of(other);
	}

	_getNullAndOtherType(t1, t2) {
		const nullType = t1 instanceof _index.NullType ? t1 : t2 instanceof _index.NullType ? t2 : null;
		const other = nullType === t1 ? t2 : t1;
		return { nullType, other };
	}
}

exports.TNullUnificationRule = TNullUnificationRule;
exports.default = TNullUnificationRule;
//# sourceMappingURL=t-null-unification-rule.js.map
