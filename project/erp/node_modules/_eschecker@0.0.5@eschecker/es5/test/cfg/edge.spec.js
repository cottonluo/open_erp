"use strict";

var _chai = require("chai");

var _edge = require("../../lib/cfg/edge");

var _edge2 = _interopRequireDefault(_edge);

var _node = require("../../lib/cfg/node");

var _node2 = _interopRequireDefault(_node);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("Edge", () => {
	describe("constructor", () => {
		it("throws if to or from are null", () => {
			(0, _chai.expect)(() => new _edge2.default(null, "T", new _node2.default("x"))).to.throw();
			(0, _chai.expect)(() => new _edge2.default(new _node2.default("x"), "T", null)).to.throw();
			(0, _chai.expect)(() => new _edge2.default(null, "T", null)).to.throw();
		});

		it("throws when to or from are not an instance of GraphNode", () => {
			(0, _chai.expect)(() => new _edge2.default("y", "T", new _node2.default("x"))).to.throw();
			(0, _chai.expect)(() => new _edge2.default(new _node2.default("x"), "T", "y")).to.throw();
			(0, _chai.expect)(() => new _edge2.default("x", "T", "y")).to.throw();
		});

		it("assigns the passed in arguments to the instance", () => {
			// arrange
			const fromNode = new _node2.default("from");
			const toNode = new _node2.default("to");

			// act
			const edge = new _edge2.default(fromNode, "Cond", toNode);

			// assert
			(0, _chai.expect)(edge).to.have.property("src").that.is.equal(fromNode);
			(0, _chai.expect)(edge).to.have.property("to").that.is.equal(toNode);
			(0, _chai.expect)(edge).to.have.property("branch").that.is.equal("Cond");
		});
	});
});
//# sourceMappingURL=edge.spec.js.map
