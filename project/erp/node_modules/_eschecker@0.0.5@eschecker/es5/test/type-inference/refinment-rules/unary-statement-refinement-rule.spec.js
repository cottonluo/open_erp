"use strict";

var _chai = require("chai");

var _sinon = require("sinon");

var _sinon2 = _interopRequireDefault(_sinon);

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

var _unaryExpressionRefinementRule = require("../../../lib/type-inference/refinement-rules/unary-expression-refinement-rule");

var _hindleyMilnerContext = require("../../../lib/type-inference/hindley-milner-context");

var _types = require("../../../lib/semantic-model/types");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("UnaryExpressionRefinementRule", function () {
	let rule, context;

	beforeEach(function () {
		rule = new _unaryExpressionRefinementRule.UnaryExpressionRefinementRule();
		context = new _hindleyMilnerContext.HindleyMilnerContext();
	});

	describe("canRefine", function () {
		it("returns true if the node is an unary expression", function () {
			// arrange
			const expression = t.unaryExpression("!", t.identifier("x"));

			// act, assert
			(0, _chai.expect)(rule.canRefine(expression)).to.be.true;
		});

		it("returns false if the node is not an unary expression", function () {
			(0, _chai.expect)(rule.canRefine(t.identifier("x"))).to.be.false;
		});
	});

	describe("refine", function () {
		it("infers the type for the argument", function () {
			// arrange
			const expression = t.unaryExpression("!", t.identifier("x"));
			_sinon2.default.stub(context, "infer");

			// act
			rule.refine(expression, context);

			// assert
			_sinon2.default.assert.calledWith(context.infer, expression.argument);
		});

		it("throws if the operator is unknown", function () {
			// arrange
			const expression = t.unaryExpression("delete", t.identifier("x"));
			_sinon2.default.stub(context, "infer");

			// act, assert
			(0, _chai.expect)(() => rule.refine(expression, context)).to.throw("The operator delete for unary expressions is not yet supported");
		});

		describe("void", function () {
			it("returns type void", function () {
				// arrange
				const expression = t.unaryExpression("void", t.identifier("x"));
				_sinon2.default.stub(context, "infer").returns(_types.NumberType.create());

				// act, assert
				(0, _chai.expect)(rule.refine(expression, context)).to.be.instanceOf(_types.VoidType);
			});
		});

		describe("!", function () {
			it("returns boolean type", function () {
				// arrange
				const expression = t.unaryExpression("!", t.identifier("x"));
				_sinon2.default.stub(context, "infer").returns(_types.NumberType.create());

				// act, assert
				(0, _chai.expect)(rule.refine(expression, context)).to.be.instanceOf(_types.BooleanType);
			});
		});

		describe("typeof", function () {
			it("returns string type", function () {
				// arrange
				const expression = t.unaryExpression("typeof", t.identifier("x"));
				_sinon2.default.stub(context, "infer").returns(_types.NumberType.create());

				// act, assert
				(0, _chai.expect)(rule.refine(expression, context)).to.be.instanceOf(_types.StringType);
			});
		});

		for (const operator of ["+", "-", "~"]) {
			describe(operator, function () {
				it("returns number type", function () {
					// arrange
					const expression = t.unaryExpression(operator, t.identifier("x"));
					_sinon2.default.stub(context, "infer").returns(_types.NullType.create());
					_sinon2.default.stub(context, "unify").returns(_types.MaybeType.of(_types.NumberType.create()));

					// act, assert
					(0, _chai.expect)(rule.refine(expression, context)).to.be.instanceOf(_types.NumberType);
				});

				it("unifies the type of the argument with type number", function () {
					// arrange
					const expression = t.unaryExpression(operator, t.identifier("x"));
					_sinon2.default.stub(context, "unify");
					_sinon2.default.stub(context, "infer").returns(_types.NullType.create());

					// act
					rule.refine(expression, context);

					// assert
					_sinon2.default.assert.calledWith(context.unify, _sinon2.default.match.instanceOf(_types.NullType), _sinon2.default.match.instanceOf(_types.NumberType), expression);
				});
			});
		}
	});
});
//# sourceMappingURL=unary-statement-refinement-rule.spec.js.map
