"use strict";

var _chai = require("chai");

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

var _symbol = require("../../../lib/semantic-model/symbol");

var _types = require("../../../lib/semantic-model/types");

var _hindleyMilnerContext = require("../../../lib/type-inference/hindley-milner-context");

var _typeInferenceContext = require("../../../lib/type-inference/type-inference-context");

var _program = require("../../../lib/semantic-model/program");

var _thisExpressionRefinementRule = require("../../../lib/type-inference/refinement-rules/this-expression-refinement-rule");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

describe("ThisExpressionRefinementRule", function () {
	let rule, context, program;

	beforeEach(function () {
		program = new _program.Program();
		context = new _hindleyMilnerContext.HindleyMilnerContext(null, new _typeInferenceContext.TypeInferenceContext(program));

		rule = new _thisExpressionRefinementRule.ThisExpressionRefinementRule();
	});

	describe("canRefine", function () {
		it("returns true for a this expression", function () {
			(0, _chai.expect)(rule.canRefine(t.thisExpression())).to.be.true;
		});

		it("returns false otherwise", function () {
			(0, _chai.expect)(rule.canRefine(t.numericLiteral(4))).to.be.false;
		});
	});

	describe("refine", function () {

		it("returns the type the this symbol in the type environment", function () {
			// arrange
			const thisExpression = t.thisExpression();
			const thiz = new _symbol.Symbol("this", _symbol.SymbolFlags.Variable);
			const thisT = _types.ObjectType.create();
			program.symbolTable.setSymbol(thisExpression, thiz);
			context.setType(thiz, thisT);

			// act
			const refined = rule.refine(thisExpression, context);

			// assert
			(0, _chai.expect)(refined).to.equal(thisT);
		});

		it("throws if the type of this is unknown and therefor this is not defined for the current scope", function () {
			// arrange
			const thisExpression = t.thisExpression();
			const thiz = new _symbol.Symbol("this", _symbol.SymbolFlags.Variable);
			program.symbolTable.setSymbol(thisExpression, thiz);

			// act, assert
			(0, _chai.expect)(() => rule.refine(thisExpression, context)).to.throw("Access to this outside of a function");
		});
	});
});
//# sourceMappingURL=this-expression-refinement-rule.spec.js.map
